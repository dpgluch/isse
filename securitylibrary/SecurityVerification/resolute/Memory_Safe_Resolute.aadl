package Memory_Safe_Resolute
  public
    annex resolute {**
	
memory_safe() <=
	** "The system is memory safe" **
	forall (p : process). memory_protected(p)

memory_protected(p : process) <=
  ** "The memory of process " p " is protected from alterations by other processes" **
  runs_on_partition_enforced_memory_os(p) or
  (runs_on_thread_enforced_memory_os(p) and
   forall (mem : memory). bound(p, mem) =>
     forall (q : process). bound(q, mem) => memory_safe_process(q))

memory_safe_process(p : process) <=
  ** "The process " p " only writes to its own memory space" **
  forall (t : contained_threads(p)). memory_safe_thread(t)

memory_safe_thread(t : thread) <=
  ** "The thread " t " only writes to its own memory space" **
  memory_safe_language_thread(t)

**};
	
end Memory_Safe_Resolute;